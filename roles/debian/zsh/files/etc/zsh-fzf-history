# Ne rien faire si fzf n'est pas installé
(( ! $+commands[fzf] )) && return

# Touche de raccourci (Ctrl+R par défaut)
(( ! ${+ZSH_FZF_HISTORY_SEARCH_BIND} )) &&
typeset -g ZSH_FZF_HISTORY_SEARCH_BIND='^r'

# Arguments de base pour fzf (tri, multi-sélection désactivée, etc.)
(( ! ${+ZSH_FZF_HISTORY_SEARCH_FZF_ARGS} )) &&
typeset -g ZSH_FZF_HISTORY_SEARCH_FZF_ARGS='+s +m -x -e --preview-window=hidden'

# Arguments supplémentaires personnalisables
(( ! ${+ZSH_FZF_HISTORY_SEARCH_FZF_EXTRA_ARGS} )) &&
typeset -g ZSH_FZF_HISTORY_SEARCH_FZF_EXTRA_ARGS=''

# Placer le curseur à la fin de la ligne sélectionnée (désactivé par défaut)
(( ! ${+ZSH_FZF_HISTORY_SEARCH_END_OF_LINE} )) &&
typeset -g ZSH_FZF_HISTORY_SEARCH_END_OF_LINE=''

# Afficher les numéros d’événement (par défaut : oui)
(( ! ${+ZSH_FZF_HISTORY_SEARCH_EVENT_NUMBERS} )) &&
typeset -g ZSH_FZF_HISTORY_SEARCH_EVENT_NUMBERS=1

# Afficher les dates (format ISO 8601) dans l’historique
(( ! ${+ZSH_FZF_HISTORY_SEARCH_DATES_IN_SEARCH} )) &&
typeset -g ZSH_FZF_HISTORY_SEARCH_DATES_IN_SEARCH=1

# Supprimer les doublons dans l’historique
(( ! ${+ZSH_FZF_HISTORY_SEARCH_REMOVE_DUPLICATES} )) &&
typeset -g ZSH_FZF_HISTORY_SEARCH_REMOVE_DUPLICATES=''

# Fonction principale pour lancer la recherche dans l’historique via fzf
fzf_history_search() {
  setopt extendedglob  # Active les globbing avancés

  FC_ARGS="-l"  # Base : liste complète de l’historique
  CANDIDATE_LEADING_FIELDS=2  # Par défaut : numéro + commande

  # Supprimer les numéros d’événement si désactivé
  if (( ! $ZSH_FZF_HISTORY_SEARCH_EVENT_NUMBERS )); then
    FC_ARGS+=" -n"
    ((CANDIDATE_LEADING_FIELDS--))
  fi

  # Ajouter la date si activé
  if (( $ZSH_FZF_HISTORY_SEARCH_DATES_IN_SEARCH )); then
    FC_ARGS+=" -i"
    ((CANDIDATE_LEADING_FIELDS+=2))
  fi

  history_cmd="fc ${=FC_ARGS} -1 0"

  # Supprimer les doublons si activé
  if [ -n "${ZSH_FZF_HISTORY_SEARCH_REMOVE_DUPLICATES}" ]; then
    if (( $+commands[awk] )); then
      history_cmd="$history_cmd | awk '!seen[\$0]++'"
    else
      history_cmd="$history_cmd | uniq"
    fi
  fi

  # Lancer fzf avec l’historique filtré
  candidates=(${(f)"$(eval $history_cmd | fzf ${=ZSH_FZF_HISTORY_SEARCH_FZF_ARGS} ${=ZSH_FZF_HISTORY_SEARCH_FZF_EXTRA_ARGS} -q "$BUFFER")"})
  local ret=$?

  if [ -n "$candidates" ]; then
    # Supprimer les champs en trop : numéro, date, etc.
    if (( $CANDIDATE_LEADING_FIELDS != 1 )); then
      BUFFER="${candidates[@]/(#m)[0-9 \-\:]##/${${(As: :)MATCH}[${CANDIDATE_LEADING_FIELDS},-1]}}"
    else
      BUFFER="${candidates[@]}"
    fi

    # Gestion des caractères d’échappement
    BUFFER=$(printf "${BUFFER[@]//\\\\n/\\\\\\n}")

    # Appliquer la commande dans le buffer
    zle vi-fetch-history -n $BUFFER

    # Aller en fin de ligne si demandé
    if [ -n "${ZSH_FZF_HISTORY_SEARCH_END_OF_LINE}" ]; then
      zle end-of-line
    fi
  fi

  zle reset-prompt
  return $ret
}

# Chargement et mappage Zsh
autoload fzf_history_search
zle -N fzf_history_search

# Association de la touche de raccourci
bindkey $ZSH_FZF_HISTORY_SEARCH_BIND fzf_history_search
